<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:jdbc="http://www.springframework.org/schema/jdbc"
   xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
      http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	  <!-- 
	    스프링 MVC에서 root-context.xml 파일의 역할은 스프링 jdbc(오라클 연결),서비스 추가를 해서 스프링 AOP를 통한 트랜잭션 적용,
	     ORM mybatis적용, 모델 DAO설정  까지 이다. 스프링 컨트롤러를 통한 화면에 보여지는 영역인 뷰부분은 없다.(컨트롤과 뷰 설정부분은 없다.)
	   -->
	   
	  <!-- AOP 자동 프록시 설정  -->
	  <aop:aspectj-autoproxy />
	   
      <!-- 스프링 api로 오라클 연결(스프링 jdbc) -->
	  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	     <property name="driverClassName" value="oracle.jdbc.OracleDriver" />
	     <!-- driverClassName변수에 value속성값 저장 -->
	     <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" /> <!-- 오라클 접속주소 -->
	     <property name="username" value="week" /> <!-- 오라클 접속 사용자 -->
	     <property name="password" value="week" /> <!-- 사용자 비번 -->
	  </bean> <!-- bean단위가 자바로 표현하면 클래스 단위이고 빈아이디는 객체명 --> 	
	  
	  <!-- spring JDBC dataSource와 mybatis를 연결 + mybatis환경설정 파일(자바 저장빈 클래스 객체 별칭을 관리)-->
	  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="dataSource" ref="dataSource" />
	   <!-- setter()메서드를 통한 DI(의존성) 주입 . ref속성값은 빈아이디 객체 dataSource를 참조한다.-->
	   <property name="configLocation" value="classpath:/mybatis-config.xml" />
	   <!-- classpath경로는 해당 개발툴의 메이븐 폴더 가상경로가 아니고 was서버에 의해서 실제로 변경된 실제 프로젝트의 WEB-INF/classes
	   경로를 가리킨다. mybatis-config.xml파일의 역할을 자바 저장빈 클래스 객체 별칭을 관리한다. 개발툴의 가상경로는 src/main/resources 
	   이다.-->
	   
	   <property name="mapperLocations" value="classpath:com/naver/mappers/*/*.xml" />
	   <!-- 쿼리문을 수행하는 mybatis 매퍼태그 파일명이 들어가는 경로 -->
	  </bean>	
	  
	  <!-- 트랜잭션 관리자(매니져) 설정 -->
	  <bean id="transactionManager"
	  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" /> <!-- setter()를 통한 DI 즉 의존성을 주입하고 ref 빈아이디 dataSource
	    를 호출하면서 트랜잭션이 반영 -->
	  </bean>  
	  <tx:annotation-driven /> <!-- 트랜잭션 설정 애너테이션 -->
	  
	  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
	   <!-- clearCache는 임시메모리 캐시를 비워서 DB연결을 해제 -->
	   <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	   <!-- 생성자를 통한 의존성 주입 -->
	  </bean>
	  
	  <!-- DAOImpl의 @Repository로 설정된 부분을 스프링에서 오토스캔(자동으로 찾아서) 하여 등록하게 함. -->
      <context:component-scan base-package="com.naver.dao" />	  
      
      <!-- 서비스 추가 이유)
           1. 컨트롤과 모델 DAO를 연결하는 중간 매개체 역할을 한다.
           2. 고개의 추가 요구사항을 반영하는 부분이다.
           3. 스프리의 AOP를 통한 트랜잭션 적용 부분이다.그러면 항상 사이트의 데이터 불일치 현상을 제거해서 신뢰도를 올릴 수 있다.
       -->
       <context:component-scan base-package="com.naver.service" />
              
       <!-- aop설정 => Aop를 xml방식으로 설정 -->
       <aop:config />       
</beans>


